#include <iostream>
#include <string>
#include <vector>

class Person
{
public:
    Person() = default;
    Person(const char* name, int age, const char* gender, int weight)
        : m_name(name), m_age(age), m_gender(gender), m_weight(weight) {}

    void set_name(const char* name)
    { 
        m_name = name;
    }

    void set_age(int age)
    {
        m_age = age;
    }

    void set_gender(const char* gender)
    {
        m_gender = gender;
    }

    void set_weight(int weight)
    {
        m_weight = weight;
    }

    void set_person(const char* name, int age, const char* gender, int weight)
    {
        set_name(name);
        set_age(age);
        set_gender(gender);
        set_weight(weight);
    }

    void p_print()
    {
        std::cout << "Имя: " << m_name << std::endl;
        std::cout << "Возраст: " << m_age << std::endl;
        std::cout << "Пол: " << m_gender << std::endl;
        std::cout << "Вес: " << m_weight << std::endl;
    }

    const std::string& GetName() const { return m_name; }

private:
    const char* m_name;
    int m_age;
    const char* m_gender;
    int m_weight;
};

class Student : public Person
{
public:
    Student() = default;
    Student(const char* name, int age, const char* gender, int weight, int study_year)
        : Person(name, age, gender, weight), m_study_year(study_year) { ++count;  }
    
    int get_study_year() const { return m_study_year; }

    void set_study_yeaar(int study_year)
    {
        m_study_year = study_year;
    }
  
    static size_t how_many()
    {
        std::cout << "Создано студентов: " << count << std::endl;
        return count;
    }

    void s_print()
    {
        Person::p_print();
        std::cout << "Год обучения: " << m_study_year << std::endl;

    }

private:
    int m_study_year{ 0 };
    static size_t count;
};



class Fruit
{
public:
    std::string m_name;
    std::string m_color;
    void set_color(std::string color) { m_color = color; }
    void set_name(std::string name) { m_name = name; }
    std::string get_color() { return m_color; }
    std::string get_name() { return m_name; }
};

class Banana : public Fruit {};

class Apple : public Fruit {};

class GrannySmith : public Apple {};


size_t Student::count = 0;

int main()
{
    setlocale(LC_ALL, "Russian");

    std::cout << "Задание 1." << std::endl;

    Student student;
    std::vector<Student> students; 

    students.emplace_back("Андрей", 20, "Мужской", 70, 2021);
    students.emplace_back("Василий", 23, "Мужской", 62, 2020);
    students.emplace_back("Дмитрий", 22, "Мужской", 84, 2022);
    students.emplace_back("Константин", 21, "Мужской", 90, 2019);

    for (auto& a : students) {
        a.s_print();
        std::cout << std::endl;
    }

    std::string name;
    std::cout << "Введите имя искомого студента: ";
    std::getline(std::cin, name);

    bool found = false;
    for (auto a : students) {
        if (a.GetName() == name) {
            found = true;
            std::cout << "Студент найден:" << std::endl;
            a.s_print();
            break;
        }
    }

    if (!found)
        std::cout << "Студент не найден." << std::endl;

    std::cout << std::endl;

    student.how_many();

    std::cout << std::endl;

    std::cout << "Задание 2." << std::endl;
           
    Apple apple;
    apple.set_color("red");
    apple.set_name("apple");
    std::cout << "My " << apple.get_name() << " is " << apple.get_color() << std::endl;
    
    Banana banana;
    banana.set_color("yellow");
    banana.set_name("banana");
    std::cout << "My " << banana.get_name() << " is " << banana.get_color() << std::endl;
  
    GrannySmith grannySmith;
    grannySmith.set_color("green");
    grannySmith.set_name("GrannySmith");
    std::cout << "My " << grannySmith.get_name() << " " << apple.get_name() << " is " << grannySmith.get_color() << std::endl;

    return 0;
}
